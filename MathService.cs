//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;
using System.Diagnostics;
using System.Web.Services;
using System.Web.Services.Protocols;
using System.Xml.Serialization;

// 
// This source code was auto-generated by Web Services Description Language Utility
//Mono Framework v4.0.30319.42000
//


/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "0.0.0.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Web.Services.WebServiceBindingAttribute(Name="MathServiceSoap", Namespace="http://tempuri.org/NumberService")]
public partial class MathService : System.Web.Services.Protocols.SoapHttpClientProtocol {
    
    private System.Threading.SendOrPostCallback AddNumbersOperationCompleted;
    
    private System.Threading.SendOrPostCallback SubtractNumbersOperationCompleted;
    
    /// <remarks/>
    public MathService() {
        this.Url = "http://service_host/NumberService.asmx";
    }
    
    /// <remarks/>
    public event AddNumbersCompletedEventHandler AddNumbersCompleted;
    
    /// <remarks/>
    public event SubtractNumbersCompletedEventHandler SubtractNumbersCompleted;
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/NumberService/AddNumbers", RequestNamespace="http://tempuri.org/NumberService", ResponseNamespace="http://tempuri.org/NumberService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public int AddNumbers(int number1, int number2) {
        object[] results = this.Invoke("AddNumbers", new object[] {
                    number1,
                    number2});
        return ((int)(results[0]));
    }
    
    /// <remarks/>
    public void AddNumbersAsync(int number1, int number2) {
        this.AddNumbersAsync(number1, number2, null);
    }
    
    /// <remarks/>
    public void AddNumbersAsync(int number1, int number2, object userState) {
        if ((this.AddNumbersOperationCompleted == null)) {
            this.AddNumbersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddNumbersOperationCompleted);
        }
        this.InvokeAsync("AddNumbers", new object[] {
                    number1,
                    number2}, this.AddNumbersOperationCompleted, userState);
    }
    
    private void OnAddNumbersOperationCompleted(object arg) {
        if ((this.AddNumbersCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.AddNumbersCompleted(this, new AddNumbersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/NumberService/SubtractNumbers", RequestNamespace="http://tempuri.org/NumberService", ResponseNamespace="http://tempuri.org/NumberService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public int SubtractNumbers(int number1, int number2) {
        object[] results = this.Invoke("SubtractNumbers", new object[] {
                    number1,
                    number2});
        return ((int)(results[0]));
    }
    
    /// <remarks/>
    public void SubtractNumbersAsync(int number1, int number2) {
        this.SubtractNumbersAsync(number1, number2, null);
    }
    
    /// <remarks/>
    public void SubtractNumbersAsync(int number1, int number2, object userState) {
        if ((this.SubtractNumbersOperationCompleted == null)) {
            this.SubtractNumbersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSubtractNumbersOperationCompleted);
        }
        this.InvokeAsync("SubtractNumbers", new object[] {
                    number1,
                    number2}, this.SubtractNumbersOperationCompleted, userState);
    }
    
    private void OnSubtractNumbersOperationCompleted(object arg) {
        if ((this.SubtractNumbersCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.SubtractNumbersCompleted(this, new SubtractNumbersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    public new void CancelAsync(object userState) {
        base.CancelAsync(userState);
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "0.0.0.0")]
public delegate void AddNumbersCompletedEventHandler(object sender, AddNumbersCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "0.0.0.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class AddNumbersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal AddNumbersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public int Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((int)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "0.0.0.0")]
public delegate void SubtractNumbersCompletedEventHandler(object sender, SubtractNumbersCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "0.0.0.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class SubtractNumbersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal SubtractNumbersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public int Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((int)(this.results[0]));
        }
    }
}
